#!/usr/bin/env python
# Copyright (C) Patrick Brady, Brian Moe, Branson Stephens (2015)
# Copyright (C) Reed Essick (2016)
#
# This file is part of lvalert
#
# lvalert is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# It is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with lvalert.  If not, see <http://www.gnu.org/licenses/>.

import sys
import os
import datetime
import time
import select
import logging
import libxml2
import getpass
import ConfigParser
from optparse import *
from M2Crypto.SSL import Context

import multiprocessing

### import the module containing the interactiveQueue
from lvalertMP.lvalert import interactiveQueue as iq

from ligo.lvalert.utils import safe_netrc

# pubsub import must come first because it overloads part of the
# StanzaProcessor class
from ligo.lvalert import pubsub

from pyxmpp.all import JID,Iq,Presence,Message,StreamError,TLSSettings
from pyxmpp.jabber.all import Client
from pyxmpp.jabber.simple import send_message
from pyxmpp.interface import implements
from pyxmpp.interfaces import *

"""
A tool to listen for events on a pubsub node 
"""

#################################################################
# help message
usage = """\
%prog [options]
-----------------------------------------------------------------

  THIS IS A TEST SCRIPT AND SHOULD NOT BE CONSIDERED READY FOR PRODUCITON
"""

"""

  A tool to listen to the pubsub service of openfire at
  lvalert.cgca.uwm.edu. LSC-Virgo members can activate their accounts 
  on this server by completing the form at
  
    https://www.lsc-group.phys.uwm.edu/cgi-bin/jabber-acct.cgi 

  and typing your password.

  Before using this program to listen to a node, you must subscribe to
  the node using lvalert_admin. Then you will receive any events that are
  published to that node by doing:

  %prog --username albert.einstein --password secret

  When an event is published to the node, a message will be printed to
  the window where the listener is running. To see the event, run

  %prog --username albert.einstein --password secret --show

  The owner (person who creates the node by default) can delete and
  publish information to the node. The owner can also add other
  publishers to the node. Configuration and management of nodes and
  subscriptions are handled with lvalert_admin. 
  
  Others can subscribe to any existing node. Run 

  lvalert_admin --help

  to find out how to manage your subscriptions. 

  It is also possible to specify actions to be taken upon receipt of a
  message from a given node using a config-file to specify the program
  to run when the message is received via different nodes. The payload
  of the message is piped to the command via stdin.  A sample
  config-file called example.ini might look like

  [lvalert_test]
  executible=./mycounter

  then running

  lvalert_listen --username albert.einstein --password secret --config-file example.ini

  would result in ./mycounter being executed and the output printed to
  screen whenever a message was received via the lvalert_test node. 

  Alternatively, instead of the name of an executable, you could
  indicate either "stdout" or "-" (withouth quotes) and the alert
  payload will be written to standard output.
"""

#################################################################
def parse_command_line():
  """
  Parser function dedicated
  """
  parser = OptionParser(usage=usage)

  #username and authentication
  parser.add_option("-a","--username",action="store",type="string",\
      default="", help="the username of the publisher or listener" )
  parser.add_option("-s","--server",action="store",type="string",\
      default="lvalert.cgca.uwm.edu", help="the pubsub server" )
  parser.add_option("-r","--resource",action="store",type="string",\
      default="listener", help="resource to use in JID" )
  parser.add_option("-c","--config-file",action="store",type="string",\
      default=None, help="config file with list of actions" )
  parser.add_option('-N', "--netrc", type="string",\
      default=os.environ.get('NETRC', '~/.netrc'),\
      help="load username and password from this file",)

  parser.add_option("-S","--show",action="store_true",\
      default=False, help="print the payload to stdout" )

  parser.add_option("-n","--node",action="store",type="string",\
      default=None, help="name of the node on the pubsub server" )

  # debugging options
  parser.add_option("-v","--verbose",action="store_true",\
      default=False, help="be verbose as you process the request" )
  parser.add_option("-g","--debug",action="store_true",\
      default=False, help="should  print out lots of information" )

  # version
  parser.add_option("-w", "--version", action="store_true",\
      default=False, help="display version information")
 
  (options,args) = parser.parse_args()

  return options, sys.argv[1:]
  
# ============================================================================
# -- get command line arguments
opts, args = parse_command_line()

if opts.version:
    import pkg_resources
    version = pkg_resources.require("ligo-lvalert")[0].version
    print "LVAlert v. %s" % version
    exit(0)

### check netrc file!
try:
    username, _, password = safe_netrc(os.path.expanduser(opts.netrc)).authenticators(opts.server)
    if not opts.username:
        opts.username = username
    elif opts.username!=username:
        password = getpass.getpass('username for server=%(server)s from netrc=%(netrc)s disagrees with --username=%(username)s\npassword for --username=%(username)s : '%{'username':opts.username, 'server':opts.server, 'netrc':opts.netrc})

except IOError:
    if not opts.username:
        opts.username = raw_input('could not find entry for server%s within netrc=%s\nusername : '%(opts.server, opts.netrc))
    password = getpass.getpass('could not find entry for server=%s within netrc=%s\npassword for --username=%s : '%(opts.server, opts.netrc, opts.username))

#=============================================================================

def fork( (foo, args) ):

    conn1, conn2 = multiprocessing.Pipe()
    args.insert( 0, conn2 ) ### connection must be the first argument!

    proc = multiprocessing.Process(target=foo, args=args ) ### define the function based on the config file?
    proc.start()
    conn2.close() ### only the child should be able to communicate through conn2, so we close it here

    return proc, conn1

#=============================================================================

class LVAlertHandler(object):
    """Provides the actions taken when an event arrives.
    """

    implements(IMessageHandlersProvider)
    
    def __init__(self, client, actions, procs, setup):
        """Just remember who created this."""
        self.client = client
        self.actions = actions
        self.procs = procs
        self.setup = setup
    
    def get_message_handlers(self):
        """Return list of (message_type, message_handler) tuples.

        The handlers returned will be called when matching message is received
        in a client session."""
        return [
            (None, self.message),
            ]

    def message(self,stanza):
        """Message handler for the component.

        Prints a message with the time an alert is received. If the
        --show option is set, then it will also print the contents of
        the alert.

        :returns: `True` to indicate, that the stanza should not be processed
        any further."""
        e=self.get_entry(stanza)
        n=self.get_node(stanza)
        if e:
            if n in self.actions:
                mp_child_name = self.actions[n]
                proc, conn = self.procs[mp_child_name] ### simply assume we have a working child

                if not proc.is_alive():
                    for proc, conn in self.procs.values():
                        proc.terminate()
                    raise RuntimeError("child=%s died"%(mp_child_name))

                ### send message through the pipe!
                conn.send( (e, time.time()) ) ### send the message and the time it was received (in case there are delays in reading on the other side)

                print "Payload received at %s" % (datetime.datetime.now().ctime())
                if opts.show:
                    print u'%s < %s' %(mp_child_name, e,),

            else:
                print "Payload received at %s" % (datetime.datetime.now().ctime())
                if opts.show:
                    print u'%s' % (e,),

        for mp_child_name, (proc, conn) in self.procs.items(): ### clean up any processes we haven't checked in a while
            if not proc.is_alive(): ### process has died
                for proc, conn in self.procs.values(): ### send SIGKILL to all child processes to clean them up
                    proc.terminate()
                raise RuntimeError("child=%s died"%(mp_child_name)) 

        return True

    def get_node(self,stanza):
        c = stanza.xmlnode.children
        c = c.children
        if c:
            return c.prop("node")

    def get_entry(self,stanza):
        c = stanza.xmlnode.children
        while c:
            try:
                if c.name=="event":
                    return c.getContent()
            except libxml2.treeError:
                pass
            c = c.next
        return None

class MyClient(Client):
    def __init__(self, jid, password, actions, procs, setup):
        # if bare JID is provided add a resource -- it is required
        if not jid.resource:
            jid=JID(jid.node, jid.domain, "listener")

        # we require a TLS connection
        #  Specify sslv3 to get around Sun Java SSL bug handling session ticket
        #  https://rt.phys.uwm.edu/Ticket/Display.html?id=1825
        #  http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6728126
        # NOTE: This is no longer necessary after Openfire 3.7.
        # (See update to RT ticket above.)
        #t=TLSSettings(require=True,verify_peer=False, ctx=Context('sslv3'))
        t=TLSSettings(require=True,verify_peer=False)

        # setup client with provided connection information
        # and identity data
        Client.__init__(self, jid, password, \
            auth_methods=["sasl:GSSAPI","sasl:PLAIN"], tls_settings=t,keepalive=30)

        # add the separate components
        self.interface_providers = [
            LVAlertHandler(self, actions, procs, setup),
            ]

    def stream_state_changed(self,state,arg):
        """This one is called when the state of stream connecting the
        component to a server changes. This will usually be used to
        let the user know what is going on."""
        if opts.verbose:
            print "*** State changed: %s %r ***" % (state,arg)
        else:
            pass

# add a logger so that we can see what's going
if opts.debug:
    logger=logging.getLogger()
    logger.addHandler(logging.StreamHandler())
    logger.setLevel(logging.DEBUG)
else:
    logging.basicConfig(level=logging.ERROR)

# debug the memory
libxml2.debugMemory(1)

# set up handlers for each node
actions={}
setup={}
procs={}
if opts.config_file:
    cp=ConfigParser.ConfigParser()
    cp.read(opts.config_file)

    for mp_child_name in cp.sections(): ### sections are separate processes
        ### extract arguments
        childConfig = cp.get(mp_child_name, "childConfig")

        if cp.has_option(mp_child_name, "verbose"):
            verbose = cp.getboolean(mp_child_name, "verbose")
        else:
            verbose = False
        if cp.has_option(mp_child_name, "print2stdout"):
            print2stdout = cp.getboolean(mp_child_name, "print2stdout")
        else:
            print2stdout = False
        if cp.has_option(mp_child_name, "sleep"):
            sleep = cp.getfloat(mp_child_name, "sleep")
        else:
            sleep = 0.1

        ### parameters about garbage collection
        if cp.has_option(mp_child_name, "maxComplete"):
            maxComplete = cp.getint(mp_child_name, "maxComplete")
        else:
            maxComplete = 100
        if cp.has_option(mp_child_name, "maxFrac"):
            maxFrac = cp.getfloat(mp_child_name, "maxFrac")
        else:
            maxFrac = 0.5

        ### parameters about warnings
        if cp.has_option(mp_child_name, "warnThr"):
            warnThr = cp.getfloat(mp_child_name, "warnThr")
        else:
            warnThr = 1e3
        if cp.has_option(mp_child_name, "recipients"):
            recipients = cp.get(mp_child_name, "recipients").split()
        else:
            recipients = []
        if cp.has_option(mp_child_name, "warnDelay"):
            warnDelay = cp.getfloat(mp_child_name, "warnDelay")
        else:
            warnDelay = 3600
        if cp.has_option(mp_child_name, "maxWarn"):
            maxWarn = cp.getint(mp_child_name, "maxWarn")
        else:
            maxWarn = 24

        ### fork the process
        proc, conn = fork( (iq.interactiveQueue, [childConfig, verbose, sleep, maxComplete, maxFrac, warnThr, recipients, warnDelay, maxWarn, print2stdout]) )
        procs[mp_child_name] = (proc, conn)

        for node in cp.get(mp_child_name, "nodes").split(): ### iterate over nodes and add them to this process
            if actions.has_key(node):
                raise ValueError("node=%s assigned to more than one child process!" % (node))
            else:
                actions[node] = mp_child_name

# set up the stream
myjid=JID(opts.username+"@"+opts.server+"/"+opts.resource)
s=MyClient(myjid, password, actions, procs, setup) ### feed in mapping between nodes -> procs, procs and conns, and setup info to fork replacement procs

if opts.verbose:
    print "connecting..."
s.connect()

if opts.verbose:
    print "listening for message..."
try:
    s.loop(1)
except KeyboardInterrupt:
    print u"disconnecting..."
    s.disconnect()

# vi: sts=4 et sw=4
