[general]
; process type is used to load libraries and determine behavior
process_type = event_supervisor

; the checks that are to be performed. We expect one section for each check listed here
checks = event_creation idq_start idq_glitchFAP idq_timeseries idq_tables idq_performance idq_finish

;------------------------
; basic checks for event 
;------------------------
[event_creation]
; check for existence of all expected metaData and trigger files
; download and parse files to make sure they're readable?

[far]
; check for existence and sanity of FAR estimate

[localRate]
; check the local rate of events submitted to GraceDB

;------------------------
; grinch managed processes
;------------------------
[externaltriggers]
; check that external triggers search was completed

[unblindinjections]
; check that unblindinjections search was completed

;------------------------
; approval processor
;------------------------
[approvalProcessor_far]
; check that approval_processor reported on it's FAR check

[approvalProcessor_idq]
; check that approval_processor reported on it's idq check

[approvalProcessor_alerts]
; check that approval_processor issued alerts as expected

;------------------------
; localization summary and sanity checks
;------------------------
[skymap_sanity]
; check for basic sanity of skymaps 
; download and check directly (does it sum to 1?)

[plot_skymap]
; check that FITS file was plotted as expected
; check that tagnames match FITS file

[skyviewer]
; check that FITS file was converted into json for skyviewer as expected
; check that tagnames match FITS file

;-----------
[skymapSummary_start]
; check that skymap autosummary started

[skymapSummary_data]
; check that skymap autosummary uploaded the expected data

[skymapSummary_finish]
; check that skymap autosummary finished

;------------------------
; PE follow-up checks, including uploading FITS files
;------------------------
[cwbPE_start]

[cwbPE_data]

[cwbPE_skymap]

[cwbPE_finish]

;-----------
[bayestar_start]

[bayestar_skymap]

[bayestar_finish]

;-----------
[libPE_start]

[libPE_postSamp]

[libPE_skymap]

[libPE_finish]

;-----------
[lalinfPE_start]

[lalinfPE_postSamp]

[lalinfPE_skymap]

[lalinfPE_finish]

;-----------
[bayeswavePE_start]

[bayeswavePE_postSamp]

[bayeswavePE_skymap]

[bayeswavePE_finish]

;------------------------
[dqSummary]
; check that dqSummary page was produced

;-----------
[idq_start]
; check that idq started

[idq_glitchFAP]
; check that idq reported a glitchFAP

[idq_timeseries]
; check that idq reported timeseries data

[idq_tables]
; check that idq reported glitch-tables data

[idq_performance]
; check that idq reported performance statistics

[idq_finish]
; check that idq finished

;-----------
[segDB_start]
; check that segDB2GraceDB started

[segDB_flags]
; check that segDB2GraceDB reported the expected flags

[segDB_vetoDef]
; check that segDB2GraceDB reported the expected vetoDefiner summaries

[segDB_any]
; check that segDB2GraceDB reported all active flags as expected

[segDB_finish]
; check that segDB2GraceDB finished

;-----------
[HofTOmegaScan_start]
; check that h(t) OmegaScans started

[HofTOmegaScan_data]
; check that h(t) OmegaScans uploaded expected data

[HofTOmegaScan_finish]
; check that h(t) OmegaScans finished

[allAuxOmegaScan_start]
; check that OmegaScans over all the auxiliary channels started

[allAuxOmegaScan_data]
; check that OmegaScans over all the auxiliary channels uploaded expected data

[allAuxOmegaScan_finish]
; check that OmegaScans over all the auxiliary channels finished

[idqOmegaScan_start]
; check that OmegaScans over iDQ's identified channels started

[idqOmegaScan_data]
; check that OmegaScans over iDQ's identified channels uploaded expected data

[idqOmegaScan_finish]
; check that OmegaScans over iDQ's identified channels finished

